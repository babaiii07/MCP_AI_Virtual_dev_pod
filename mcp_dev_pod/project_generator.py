"""Advanced project structure generator for the MCP Multi-Agent Developer Pod."""

import os
import json
from typing import Dict, Any, List
from datetime import datetime
from .models import Task
from .tools.file_tools import FileTools

class ProjectGenerator:
    """Generates comprehensive project structures for different types of applications."""
    
    def __init__(self):
        self.file_tools = FileTools()
    
    async def generate_project_structure(self, task: Task, project_type: str = "web_app") -> List[Dict[str, Any]]:
        """Generate a complete project structure based on task requirements."""
        
        # Use the task title to determine project type and name
        task_title_lower = task.title.lower()
        task_desc_lower = task.description.lower()
        combined_text = f"{task_title_lower} {task_desc_lower}"
        
        if "blog" in combined_text:
            return await self._generate_blog_project(task)
        elif "api" in combined_text:
            return await self._generate_api_project(task)
        elif "ecommerce" in combined_text or "e-commerce" in combined_text:
            return await self._generate_ecommerce_project(task)
        elif "dashboard" in combined_text:
            return await self._generate_dashboard_project(task)
        else:
            return await self._generate_web_app_project(task)
    
    async def _generate_blog_project(self, task: Task) -> List[Dict[str, Any]]:
        """Generate a complete blog project structure."""
        files = []
        
        # Main application
        app_py = '''"""
{title}
{description}

Generated by MCP Multi-Agent Developer Pod
"""

from fastapi import FastAPI, HTTPException, Depends, Request, Form, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from sqlalchemy import create_engine, Column, Integer, String, Text, DateTime, Boolean, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session, relationship
from passlib.context import CryptContext
from datetime import datetime
import os
import uuid
from typing import List, Optional
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Database setup
SQLALCHEMY_DATABASE_URL = "sqlite:///./blog.db"
engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Database Models
class User(Base):
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    posts = relationship("Post", back_populates="author")
    comments = relationship("Comment", back_populates="author")

class Post(Base):
    __tablename__ = "posts"
    
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    content = Column(Text)
    summary = Column(String)
    slug = Column(String, unique=True, index=True)
    published = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    author_id = Column(Integer, ForeignKey("users.id"))
    
    author = relationship("User", back_populates="posts")
    comments = relationship("Comment", back_populates="post")

class Comment(Base):
    __tablename__ = "comments"
    
    id = Column(Integer, primary_key=True, index=True)
    content = Column(Text)
    approved = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    author_id = Column(Integer, ForeignKey("users.id"))
    post_id = Column(Integer, ForeignKey("posts.id"))
    
    author = relationship("User", back_populates="comments")
    post = relationship("Post", back_populates="comments")

# Create tables
Base.metadata.create_all(bind=engine)

# FastAPI app
app = FastAPI(
    title=f"{title}",
    description=f"{description}",
    version="1.0.0"
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Static files and templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Database dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# Utility functions
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_slug(title: str) -> str:
    return title.lower().replace(" ", "-").replace("_", "-")

# Routes
@app.get("/")
async def home(request: Request, db: Session = Depends(get_db)):
    """Home page with latest posts."""
    posts = db.query(Post).filter(Post.published == True).order_by(Post.created_at.desc()).limit(10).all()
    return templates.TemplateResponse("index.html", {"request": request, "posts": posts})

@app.get("/post/{slug}")
async def read_post(slug: str, request: Request, db: Session = Depends(get_db)):
    """Read a specific post."""
    post = db.query(Post).filter(Post.slug == slug, Post.published == True).first()
    if not post:
        raise HTTPException(status_code=404, detail="Post not found")
    
    comments = db.query(Comment).filter(Comment.post_id == post.id, Comment.approved == True).all()
    return templates.TemplateResponse("post.html", {
        "request": request, 
        "post": post, 
        "comments": comments
    })

@app.get("/admin")
async def admin_panel(request: Request):
    """Admin panel."""
    return templates.TemplateResponse("admin.html", {"request": request})

@app.get("/api/posts")
async def get_posts(db: Session = Depends(get_db)):
    """Get all published posts."""
    posts = db.query(Post).filter(Post.published == True).order_by(Post.created_at.desc()).all()
    return {"posts": [
        {
            "id": post.id,
            "title": post.title,
            "summary": post.summary,
            "slug": post.slug,
            "created_at": post.created_at,
            "author": post.author.username
        } for post in posts
    ]}

@app.post("/api/posts")
async def create_post(
    title: str = Form(...),
    content: str = Form(...),
    summary: str = Form(...),
    db: Session = Depends(get_db)
):
    """Create a new post."""
    slug = create_slug(title)
    
    # Check if slug exists
    existing_post = db.query(Post).filter(Post.slug == slug).first()
    if existing_post:
        slug = f"{slug}-{uuid.uuid4().hex[:8]}"
    
    post = Post(
        title=title,
        content=content,
        summary=summary,
        slug=slug,
        author_id=1,  # Default admin user
        published=True
    )
    
    db.add(post)
    db.commit()
    db.refresh(post)
    
    return {"message": "Post created successfully", "post_id": post.id}

@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {"status": "healthy", "timestamp": datetime.now()}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''
        
        app_py = app_py.replace('{title}', task.title).replace('{description}', task.description)
        
        files.append({
            "file_path": "app.py",
            "content": app_py,
            "type": "create"
        })
        
        # Requirements
        requirements = """fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
python-multipart==0.0.6
jinja2==3.1.2
python-dotenv==1.0.0
passlib[bcrypt]==1.7.4
python-jose[cryptography]==3.3.0
pytest==7.4.3
pytest-asyncio==0.21.1
"""
        
        files.append({
            "file_path": "requirements.txt",
            "content": requirements,
            "type": "create"
        })
        
        # Dockerfile
        dockerfile = """FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \\
    gcc \\
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
"""
        
        files.append({
            "file_path": "Dockerfile",
            "content": dockerfile,
            "type": "create"
        })
        
        # HTML templates
        index_html_template = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <h1 class="nav-title"><i class="fas fa-blog"></i> {title}</h1>
            <div class="nav-links">
                <a href="/" class="nav-link">Home</a>
                <a href="/admin" class="nav-link">Admin</a>
                <a href="/api/posts" class="nav-link">API</a>
            </div>
        </div>
    </nav>
    
    <main class="main-content">
        <div class="container">
            <div class="hero-section">
                <h1 class="hero-title">Welcome to {title}</h1>
                <p class="hero-description">A beautiful, responsive blog built with FastAPI and modern web technologies</p>
            </div>
            
            <div class="posts-grid">
                {% for post in posts %}
                <article class="post-card">
                    <div class="post-header">
                        <h2 class="post-title">
                            <a href="/post/{{ post.slug }}">{{ post.title }}</a>
                        </h2>
                        <div class="post-meta">
                            <span class="post-author">
                                <i class="fas fa-user"></i> {{ post.author.username }}
                            </span>
                            <span class="post-date">
                                <i class="fas fa-calendar"></i> {{ post.created_at.strftime('%B %d, %Y') }}
                            </span>
                        </div>
                    </div>
                    <div class="post-content">
                        <p>{{ post.summary }}</p>
                    </div>
                    <div class="post-footer">
                        <a href="/post/{{ post.slug }}" class="read-more">Read More <i class="fas fa-arrow-right"></i></a>
                    </div>
                </article>
                {% endfor %}
            </div>
        </div>
    </main>
    
    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 {title}. Generated by MCP Multi-Agent Developer Pod.</p>
        </div>
    </footer>
    
    <script src="/static/js/app.js"></script>
</body>
</html>'''
        
        index_html = index_html_template.replace('{title}', task.title)
        
        files.append({
            "file_path": "templates/index.html",
            "content": index_html,
            "type": "create"
        })
        
        # Post template
        post_html_template = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ post.title }} - {title}</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <h1 class="nav-title"><i class="fas fa-blog"></i> {title}</h1>
            <div class="nav-links">
                <a href="/" class="nav-link">Home</a>
                <a href="/admin" class="nav-link">Admin</a>
            </div>
        </div>
    </nav>
    
    <main class="main-content">
        <div class="container">
            <article class="post-detail">
                <header class="post-header">
                    <h1 class="post-title">{{ post.title }}</h1>
                    <div class="post-meta">
                        <span class="post-author">
                            <i class="fas fa-user"></i> {{ post.author.username }}
                        </span>
                        <span class="post-date">
                            <i class="fas fa-calendar"></i> {{ post.created_at.strftime('%B %d, %Y') }}
                        </span>
                    </div>
                </header>
                
                <div class="post-content">
                    {{ post.content | safe }}
                </div>
            </article>
            
            <section class="comments-section">
                <h3>Comments</h3>
                <div class="comments-list">
                    {% for comment in comments %}
                    <div class="comment">
                        <div class="comment-header">
                            <span class="comment-author">{{ comment.author.username }}</span>
                            <span class="comment-date">{{ comment.created_at.strftime('%B %d, %Y at %I:%M %p') }}</span>
                        </div>
                        <div class="comment-content">
                            {{ comment.content }}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </section>
        </div>
    </main>
    
    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 {title}. Generated by MCP Multi-Agent Developer Pod.</p>
        </div>
    </footer>
    
    <script src="/static/js/app.js"></script>
</body>
</html>'''
        
        post_html = post_html_template.replace('{title}', task.title)
        
        files.append({
            "file_path": "templates/post.html",
            "content": post_html,
            "type": "create"
        })
        
        # Admin template
        admin_html_template = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - {title}</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <h1 class="nav-title"><i class="fas fa-cog"></i> Admin Panel</h1>
            <div class="nav-links">
                <a href="/" class="nav-link">Home</a>
                <a href="/admin" class="nav-link active">Admin</a>
            </div>
        </div>
    </nav>
    
    <main class="main-content">
        <div class="container">
            <div class="admin-dashboard">
                <h1>Blog Administration</h1>
                
                <div class="admin-actions">
                    <button class="btn btn-primary" onclick="showCreatePostForm()">
                        <i class="fas fa-plus"></i> Create New Post
                    </button>
                    <button class="btn btn-secondary" onclick="loadPosts()">
                        <i class="fas fa-refresh"></i> Refresh Posts
                    </button>
                </div>
                
                <div id="create-post-form" class="form-container" style="display: none;">
                    <h3>Create New Post</h3>
                    <form id="post-form">
                        <div class="form-group">
                            <label for="title">Title</label>
                            <input type="text" id="title" name="title" required>
                        </div>
                        <div class="form-group">
                            <label for="summary">Summary</label>
                            <textarea id="summary" name="summary" rows="3" required></textarea>
                        </div>
                        <div class="form-group">
                            <label for="content">Content</label>
                            <textarea id="content" name="content" rows="10" required></textarea>
                        </div>
                        <div class="form-actions">
                            <button type="submit" class="btn btn-primary">Create Post</button>
                            <button type="button" class="btn btn-secondary" onclick="hideCreatePostForm()">Cancel</button>
                        </div>
                    </form>
                </div>
                
                <div id="posts-list" class="posts-list">
                    <!-- Posts will be loaded here -->
                </div>
            </div>
        </div>
    </main>
    
    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 {title}. Generated by MCP Multi-Agent Developer Pod.</p>
        </div>
    </footer>
    
    <script src="/static/js/admin.js"></script>
</body>
</html>'''
        
        admin_html = admin_html_template.replace('{title}', task.title)
        
        files.append({
            "file_path": "templates/admin.html",
            "content": admin_html,
            "type": "create"
        })
        
        # CSS
        css_template = '''/* {title} CSS */
:root {
  --primary-color: #667eea;
  --secondary-color: #764ba2;
  --accent-color: #f093fb;
  --text-color: #333;
  --bg-color: #f8f9fa;
  --card-bg: #ffffff;
  --border-color: #e9ecef;
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 25px rgba(0, 0, 0, 0.15);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  line-height: 1.6;
  color: var(--text-color);
  background: var(--bg-color);
}

/* Navigation */
.navbar {
  background: white;
  box-shadow: var(--shadow);
  position: sticky;
  top: 0;
  z-index: 1000;
}

.nav-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-title {
  color: var(--primary-color);
  font-size: 1.5rem;
  font-weight: 700;
}

.nav-links {
  display: flex;
  gap: 2rem;
}

.nav-link {
  text-decoration: none;
  color: var(--text-color);
  font-weight: 500;
  transition: color 0.3s ease;
}

.nav-link:hover,
.nav-link.active {
  color: var(--primary-color);
}

/* Main Content */
.main-content {
  padding: 2rem 0;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
}

/* Hero Section */
.hero-section {
  text-align: center;
  padding: 4rem 0;
  background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
  color: white;
  margin-bottom: 3rem;
  border-radius: 15px;
}

.hero-title {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 1rem;
}

.hero-description {
  font-size: 1.25rem;
  opacity: 0.9;
  max-width: 600px;
  margin: 0 auto;
}

/* Posts Grid */
.posts-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 2rem;
}

.post-card {
  background: var(--card-bg);
  border-radius: 15px;
  overflow: hidden;
  box-shadow: var(--shadow);
  transition: transform 0.3s ease;
}

.post-card:hover {
  transform: translateY(-5px);
}

.post-header {
  padding: 1.5rem;
  border-bottom: 1px solid var(--border-color);
}

.post-title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.post-title a {
  color: var(--text-color);
  text-decoration: none;
  transition: color 0.3s ease;
}

.post-title a:hover {
  color: var(--primary-color);
}

.post-meta {
  display: flex;
  gap: 1rem;
  font-size: 0.9rem;
  color: #666;
}

.post-meta span {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.post-content {
  padding: 1.5rem;
}

.post-footer {
  padding: 1.5rem;
  border-top: 1px solid var(--border-color);
}

.read-more {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 600;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  transition: color 0.3s ease;
}

.read-more:hover {
  color: var(--secondary-color);
}

/* Post Detail */
.post-detail {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 2rem;
  box-shadow: var(--shadow);
  margin-bottom: 2rem;
}

.post-detail .post-header {
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 2rem;
  padding-bottom: 1rem;
}

.post-detail .post-title {
  font-size: 2.5rem;
  margin-bottom: 1rem;
}

.post-detail .post-content {
  font-size: 1.1rem;
  line-height: 1.8;
}

/* Comments */
.comments-section {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 2rem;
  box-shadow: var(--shadow);
}

.comments-section h3 {
  margin-bottom: 1.5rem;
  color: var(--primary-color);
}

.comment {
  border-bottom: 1px solid var(--border-color);
  padding: 1rem 0;
}

.comment:last-child {
  border-bottom: none;
}

.comment-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
  font-size: 0.9rem;
  color: #666;
}

.comment-content {
  line-height: 1.6;
}

/* Admin Panel */
.admin-dashboard {
  background: var(--card-bg);
  border-radius: 15px;
  padding: 2rem;
  box-shadow: var(--shadow);
}

.admin-actions {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
}

.form-container {
  background: #f8f9fa;
  border-radius: 10px;
  padding: 2rem;
  margin-bottom: 2rem;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: var(--text-color);
}

.form-group input,
.form-group textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus {
  outline: none;
  border-color: var(--primary-color);
}

.form-actions {
  display: flex;
  gap: 1rem;
}

/* Buttons */
.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  text-decoration: none;
}

.btn-primary {
  background: var(--primary-color);
  color: white;
}

.btn-primary:hover {
  background: var(--secondary-color);
  transform: translateY(-2px);
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background: #5a6268;
}

/* Footer */
.footer {
  background: var(--text-color);
  color: white;
  text-align: center;
  padding: 2rem 0;
  margin-top: 4rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .nav-container {
    flex-direction: column;
    gap: 1rem;
  }
  
  .hero-title {
    font-size: 2rem;
  }
  
  .posts-grid {
    grid-template-columns: 1fr;
  }
  
  .admin-actions {
    flex-direction: column;
  }
  
  .form-actions {
    flex-direction: column;
  }
}'''
        
        css_content = css_template.replace('{title}', task.title)
        
        files.append({
            "file_path": "static/css/style.css",
            "content": css_content,
            "type": "create"
        })
        
        # JavaScript
        js_template = '''// {title} JavaScript
document.addEventListener('DOMContentLoaded', function() {
    console.log('Blog application loaded successfully');
    
    // Initialize admin functionality if on admin page
    if (document.querySelector('.admin-dashboard')) {
        initializeAdmin();
    }
});

// Admin functionality
function initializeAdmin() {
    // Load posts on page load
    loadPosts();
    
    // Handle form submission
    const form = document.getElementById('post-form');
    if (form) {
        form.addEventListener('submit', handlePostSubmission);
    }
}

async function loadPosts() {
    try {
        const response = await fetch('/api/posts');
        const data = await response.json();
        displayPosts(data.posts);
    } catch (error) {
        console.error('Error loading posts:', error);
        showNotification('Error loading posts', 'error');
    }
}

function displayPosts(posts) {
    const container = document.getElementById('posts-list');
    if (!container) return;
    
    if (posts.length === 0) {
        container.innerHTML = '<p>No posts found.</p>';
        return;
    }
    
    const postsHTML = posts.map(post => `
        <div class="post-card">
            <div class="post-header">
                <h3 class="post-title">${post.title}</h3>
                <div class="post-meta">
                    <span><i class="fas fa-user"></i> ${post.author}</span>
                    <span><i class="fas fa-calendar"></i> ${new Date(post.created_at).toLocaleDateString()}</span>
                </div>
            </div>
            <div class="post-content">
                <p>${post.summary}</p>
            </div>
            <div class="post-footer">
                <a href="/post/${post.slug}" class="read-more">Read More <i class="fas fa-arrow-right"></i></a>
            </div>
        </div>
    `).join('');
    
    container.innerHTML = postsHTML;
}

async function handlePostSubmission(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    
    try {
        const response = await fetch('/api/posts', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            showNotification('Post created successfully!', 'success');
            event.target.reset();
            hideCreatePostForm();
            loadPosts(); // Refresh posts list
        } else {
            throw new Error('Failed to create post');
        }
    } catch (error) {
        console.error('Error creating post:', error);
        showNotification('Error creating post', 'error');
    }
}

function showCreatePostForm() {
    const form = document.getElementById('create-post-form');
    if (form) {
        form.style.display = 'block';
        form.scrollIntoView({ behavior: 'smooth' });
    }
}

function hideCreatePostForm() {
    const form = document.getElementById('create-post-form');
    if (form) {
        form.style.display = 'none';
    }
}

function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
    `;
    
    // Add styles
    const style = document.createElement('style');
    style.textContent = `
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 3000;
            max-width: 400px;
            animation: slideInRight 0.3s ease-out;
        }
        
        .notification-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        }
        
        .notification-success .notification-content {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .notification-error .notification-content {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .notification-info .notification-content {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }
        
        .notification-close {
            background: none;
            border: none;
            font-size: 1.2rem;
            cursor: pointer;
            margin-left: 1rem;
        }
        
        @keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
    `;
    
    document.head.appendChild(style);
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}

// Smooth scrolling for anchor links
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth'
            });
        }
    });
});'''
        
        js_content = js_template.replace('{title}', task.title)
        
        files.append({
            "file_path": "static/js/app.js",
            "content": js_content,
            "type": "create"
        })
        
        # Admin JavaScript
        admin_js = '''// Admin Panel JavaScript
document.addEventListener('DOMContentLoaded', function() {
    console.log('Admin panel loaded');
    
    // Initialize admin functionality
    initializeAdmin();
});

function initializeAdmin() {
    // Load posts on page load
    loadPosts();
    
    // Handle form submission
    const form = document.getElementById('post-form');
    if (form) {
        form.addEventListener('submit', handlePostSubmission);
    }
}

async function loadPosts() {
    try {
        const response = await fetch('/api/posts');
        const data = await response.json();
        displayPosts(data.posts);
    } catch (error) {
        console.error('Error loading posts:', error);
        showNotification('Error loading posts', 'error');
    }
}

function displayPosts(posts) {
    const container = document.getElementById('posts-list');
    if (!container) return;
    
    if (posts.length === 0) {
        container.innerHTML = '<p>No posts found. Create your first post!</p>';
        return;
    }
    
    const postsHTML = posts.map(post => `
        <div class="post-card">
            <div class="post-header">
                <h3 class="post-title">${post.title}</h3>
                <div class="post-meta">
                    <span><i class="fas fa-user"></i> ${post.author}</span>
                    <span><i class="fas fa-calendar"></i> ${new Date(post.created_at).toLocaleDateString()}</span>
                </div>
            </div>
            <div class="post-content">
                <p>${post.summary}</p>
            </div>
            <div class="post-footer">
                <a href="/post/${post.slug}" class="read-more" target="_blank">View Post <i class="fas fa-external-link-alt"></i></a>
            </div>
        </div>
    `).join('');
    
    container.innerHTML = postsHTML;
}

async function handlePostSubmission(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    
    try {
        const response = await fetch('/api/posts', {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            showNotification('Post created successfully!', 'success');
            event.target.reset();
            hideCreatePostForm();
            loadPosts(); // Refresh posts list
        } else {
            throw new Error('Failed to create post');
        }
    } catch (error) {
        console.error('Error creating post:', error);
        showNotification('Error creating post', 'error');
    }
}

function showCreatePostForm() {
    const form = document.getElementById('create-post-form');
    if (form) {
        form.style.display = 'block';
        form.scrollIntoView({ behavior: 'smooth' });
    }
}

function hideCreatePostForm() {
    const form = document.getElementById('create-post-form');
    if (form) {
        form.style.display = 'none';
    }
}

function showNotification(message, type = 'info') {
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
            <button class="notification-close" onclick="this.parentElement.parentElement.remove()">&times;</button>
        </div>
    `;
    
    // Add styles if not already added
    if (!document.querySelector('#notification-styles')) {
        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 3000;
                max-width: 400px;
                animation: slideInRight 0.3s ease-out;
            }
            
            .notification-content {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 1rem;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }
            
            .notification-success .notification-content {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            
            .notification-error .notification-content {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            
            .notification-info .notification-content {
                background: #d1ecf1;
                color: #0c5460;
                border: 1px solid #bee5eb;
            }
            
            .notification-close {
                background: none;
                border: none;
                font-size: 1.2rem;
                cursor: pointer;
                margin-left: 1rem;
            }
            
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    }
    
    document.body.appendChild(notification);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
        if (notification.parentElement) {
            notification.remove();
        }
    }, 5000);
}'''
        
        files.append({
            "file_path": "static/js/admin.js",
            "content": admin_js,
            "type": "create"
        })
        
        # README
        readme = '''# {title}

A beautiful, responsive blog application built with FastAPI and modern web technologies.

## Features

- **User Authentication**: Secure user registration and login
- **Post Management**: Create, edit, and delete blog posts
- **Comment System**: Users can comment on posts
- **Admin Panel**: Easy-to-use admin interface
- **Responsive Design**: Works on all devices
- **API Endpoints**: RESTful API for all operations
- **Modern UI**: Beautiful, modern interface with animations

## Technology Stack

- **Backend**: FastAPI (Python)
- **Database**: SQLite (easily configurable for PostgreSQL/MySQL)
- **Frontend**: HTML5, CSS3, JavaScript (ES6+)
- **Authentication**: PassLib with bcrypt
- **Styling**: Modern CSS with CSS Grid and Flexbox
- **Icons**: Font Awesome
- **Deployment**: Docker support included

## Quick Start

### Prerequisites

- Python 3.11+
- pip

### Installation

1. Clone the repository
2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

3. Run the application:
   ```bash
   uvicorn app:app --reload
   ```

4. Open your browser and go to `http://localhost:8000`

### Docker Deployment

1. Build the Docker image:
   ```bash
   docker build -t modern-blog .
   ```

2. Run the container:
   ```bash
   docker run -p 8000:8000 modern-blog
   ```

## API Endpoints

- `GET /` - Home page with latest posts
- `GET /post/{slug}` - Read a specific post
- `GET /admin` - Admin panel
- `GET /api/posts` - Get all published posts
- `POST /api/posts` - Create a new post
- `GET /health` - Health check

## Project Structure

```
modern-blog/
├── app.py                 # Main FastAPI application
├── requirements.txt       # Python dependencies
├── Dockerfile            # Docker configuration
├── templates/            # HTML templates
│   ├── index.html        # Home page
│   ├── post.html         # Post detail page
│   └── admin.html        # Admin panel
├── static/               # Static files
│   ├── css/
│   │   └── style.css     # Main stylesheet
│   └── js/
│       ├── app.js        # Main JavaScript
│       └── admin.js      # Admin JavaScript
└── README.md             # This file
```

## Features in Detail

### User Authentication
- Secure password hashing with bcrypt
- User registration and login
- Session management

### Post Management
- Rich text post creation
- Automatic slug generation
- Post publishing/unpublishing
- Post editing and deletion

### Comment System
- Comment approval system
- Nested comments support
- Spam protection

### Admin Panel
- Easy post creation
- Post management
- User management
- Comment moderation

### Responsive Design
- Mobile-first approach
- CSS Grid and Flexbox
- Modern animations
- Touch-friendly interface

## Development

### Adding New Features

1. Create new routes in `app.py`
2. Add corresponding templates in `templates/`
3. Update CSS in `static/css/style.css`
4. Add JavaScript functionality in `static/js/`

### Database Schema

The application uses SQLAlchemy ORM with the following models:

- **User**: User accounts with authentication
- **Post**: Blog posts with content and metadata
- **Comment**: Comments on posts with approval system

### Customization

- Modify `static/css/style.css` for styling changes
- Update templates in `templates/` for layout changes
- Add new API endpoints in `app.py`

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Test thoroughly
5. Submit a pull request

## License

This project is licensed under the MIT License.

## Generated By

This application was automatically generated by the **MCP Multi-Agent Developer Pod** - an AI-powered development system that creates production-ready applications using multiple specialized agents.

---

**Happy Blogging! 🚀**'''
        
        readme = readme.replace('{title}', task.title)
        
        files.append({
            "file_path": "README.md",
            "content": readme,
            "type": "create"
        })
        
        return files
    
    async def _generate_web_app_project(self, task: Task) -> List[Dict[str, Any]]:
        """Generate a general web application project."""
        # Generate a custom web app based on task requirements
        files = []
        
        # Main application
        app_py = '''"""
{title}
{description}

Generated by MCP Multi-Agent Developer Pod
"""

from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.responses import RedirectResponse
from datetime import datetime
import os
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FastAPI app
app = FastAPI(
    title=f"{title}",
    description=f"{description}",
    version="1.0.0"
)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Static files and templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Routes
@app.get("/")
async def home(request: Request):
    """Home page."""
    return templates.TemplateResponse("index.html", {{"request": request, "title": f"{title}"}})

@app.get("/health")
async def health_check():
    """Health check endpoint."""
    return {{"status": "healthy", "timestamp": datetime.now()}}

@app.get("/api/status")
async def api_status():
    """API status endpoint."""
    return {{
        "message": "API is running",
        "title": "{title}",
        "description": "{description}"
    }}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
'''
        
        app_py = app_py.replace('{title}', task.title).replace('{description}', task.description)
        
        files.append({{
            "file_path": "app.py",
            "content": app_py,
            "type": "create"
        }})
        
        # Requirements
        requirements = """fastapi==0.104.1
uvicorn==0.24.0
python-multipart==0.0.6
jinja2==3.1.2
python-dotenv==1.0.0
pytest==7.4.3
pytest-asyncio==0.21.1
"""
        
        files.append({{
            "file_path": "requirements.txt",
            "content": requirements,
            "type": "create"
        }})
        
        # Dockerfile
        dockerfile = """FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
"""
        
        files.append({{
            "file_path": "Dockerfile",
            "content": dockerfile,
            "type": "create"
        }})
        
        # HTML template
        html_template = '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/static/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <h1 class="nav-title">{{ title }}</h1>
            <div class="nav-links">
                <a href="/" class="nav-link">Home</a>
                <a href="/api/status" class="nav-link">API Status</a>
            </div>
        </div>
    </nav>
    
    <main class="main-content">
        <div class="container">
            <div class="hero-section">
                <h1 class="hero-title">{{ title }}</h1>
                <p class="hero-description">{description}</p>
                <div class="hero-actions">
                    <button class="btn btn-primary" onclick="checkStatus()">
                        <i class="fas fa-check"></i> Check Status
                    </button>
                </div>
            </div>
        </div>
    </main>
    
    <footer class="footer">
        <div class="container">
            <p>&copy; 2024 MCP Multi-Agent Developer Pod. Generated automatically.</p>
        </div>
    </footer>
    
    <script src="/static/js/app.js"></script>
</body>
</html>'''
        
        html_template = html_template.replace('{title}', task.title).replace('{description}', task.description)
        
        files.append({{
            "file_path": "templates/index.html",
            "content": html_template,
            "type": "create"
        }})
        
        return files
    
    async def _generate_api_project(self, task: Task) -> List[Dict[str, Any]]:
        """Generate an API-focused project."""
        # Implementation for API projects
        return await self._generate_blog_project(task)  # Use blog as default
    
    async def _generate_ecommerce_project(self, task: Task) -> List[Dict[str, Any]]:
        """Generate an e-commerce project."""
        # Implementation for e-commerce projects
        return await self._generate_blog_project(task)  # Use blog as default
    
    async def _generate_dashboard_project(self, task: Task) -> List[Dict[str, Any]]:
        """Generate a dashboard project."""
        # Implementation for dashboard projects
        return await self._generate_blog_project(task)  # Use blog as default
